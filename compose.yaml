services:
  dms_swen3:
    image: dms_swen3
    build:
      context: .
      dockerfile: DMS_SWEN3/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "8080:8080"
    networks:
      - postgres

  postgres:
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    networks:
      - postgres
    ports:
      - "5433:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:6.18
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      - postgres
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    restart: unless-stopped
    
  nginx:
    image: nginx:alpine
    ports:
    - "8081:80"
    volumes:
    - ./DMS_SWEN3/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      paperless:
        condition: service_healthy
      dms_swen3:
        condition: service_started
    networks: [postgres]
  
  paperless:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    ports:
    - "8000:8000"
    environment:
      PAPERLESS_SECRET_KEY: ${PAPERLESS_SECRET_KEY}
      PAPERLESS_DBHOST: ${PAPERLESS_DBHOST}
      PAPERLESS_DBPORT: ${PAPERLESS_DBPORT}
      PAPERLESS_DBNAME: ${POSTGRES_DB}
      PAPERLESS_DBUSER: ${POSTGRES_USER}
      PAPERLESS_DBPASS: ${POSTGRES_PASSWORD}
      PAPERLESS_REDIS: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
    - paperless_data:/usr/src/paperless/data
    - paperless_media:/usr/src/paperless/media
    networks: [postgres]
      
  redis:
    image: redis:alpine
    command: [ "redis-server", "--appendonly", "yes" ]
    networks: [ postgres ]

networks:
  postgres:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  paperless_data:
  paperless_media:
