services:
  dms_swen3:
    image: dms_swen3
    build:
      context: .
      dockerfile: DMS_SWEN3/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=${POSTGRES_PORT};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMq__HostName=rabbitmq
      - RabbitMq__Port=5672
      - RabbitMq__VirtualHost=/
      - RabbitMq__UserName=${RABBITMQ_DEFAULT_USER}
      - RabbitMq__Password=${RABBITMQ_DEFAULT_PASS}
      - RabbitMq__QueueName=documents.uploaded
    networks: [backend]
    restart: unless-stopped

  postgres:
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:6.18
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks: [backend]
    ports: ["127.0.0.1:${PGADMIN_PORT}:80"]
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./DMS_SWEN3/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      paperless:
        condition: service_started
      dms_swen3:
        condition: service_started
      client:
        condition: service_healthy
    networks: [backend, edge]
    restart: unless-stopped

  client:
    image: dms_client
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: /api
    depends_on:
      dms_swen3:
        condition: service_started
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "test -s /usr/share/nginx/html/index.html || wget -q --spider http://localhost/" ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  paperless:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    environment:
      PAPERLESS_SECRET_KEY: ${PAPERLESS_SECRET_KEY}
      PAPERLESS_DBHOST: ${PAPERLESS_DBHOST}
      PAPERLESS_DBPORT: ${PAPERLESS_DBPORT}
      PAPERLESS_DBNAME: ${POSTGRES_DB}
      PAPERLESS_DBUSER: ${POSTGRES_USER}
      PAPERLESS_DBPASS: ${POSTGRES_PASSWORD}
      PAPERLESS_REDIS: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - paperless_data:/usr/src/paperless/data
      - paperless_media:/usr/src/paperless/media
    networks: [backend]
    restart: unless-stopped

  redis:
    image: redis:alpine
    command: [ "redis-server", "--appendonly", "yes" ]
    networks: [backend]
    restart: unless-stopped
    
  rabbitmq:
    networks: [backend, edge]
    image: rabbitmq:4.1-management
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped

  ocr_worker:
    image: dms_ocr_worker
    build:
      context: ./OcrWorker
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      - DOTNET_ENVIRONMENT=Development
      - RabbitMq__HostName=rabbitmq
      - RabbitMq__Port=5672
      - RabbitMq__VirtualHost=/
      - RabbitMq__UserName=${RABBITMQ_DEFAULT_USER}
      - RabbitMq__Password=${RABBITMQ_DEFAULT_PASS}
      - RabbitMq__QueueName=documents.uploaded
    networks: [backend]
    restart: unless-stopped

networks:
  backend:
    driver: bridge
    internal: true
  edge:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  paperless_data:
  paperless_media:
  rabbitmq_data:
